Google Cloud Exam
https://medium.com/@earlg3/google-cloud-architect-exam-study-materials-5ab327b62bc8
https://cloud.google.com/training/exams/
https://cloud.google.com/certification/practice-exam/cloud-architect
https://cloud.google.com/certification/guides/cloud-architect/#certificate-exam-guide
https://goo.gl/oFp6ep
https://cloud.google.com/appengine/docs/standard/
https://cloud.google.com/compute/docs/vpn/overview
https://cloud.google.com/dns/overview
https://cloud.google.com/container-engine/reference/rest/
https://cloud.google.com/functions/docs/concepts/overview

# Exam tested on:
# You are tested on your:
Knowledge of what Google’s cloud services are and their use cases
Understanding of how individual services work
Understanding of how Google’s services are intended to fit together

# Can you choose which services to use for various cases optimizing:
Availability
Scalability
Security
Price 

# Sometimes Google Cloud services seem interchangeable
BigTable or DataStore
BigQuery or Cloud SQL
App Engine or Container Engine

# The exam asks you to make the best choice
The right choice is not always obvious
Look for keywords that give you a hint

Automate deployments using Google App Engine
Deploy hybrid cloud applications using Container Engine and Kubernetes
Build microservices using Google Cloud Functions

# Multi-regional resources
Cloud storage
Cloud Datastore
Cloud BigQuery

## IaaS ##
# Google Cloud Compute
Infrastructure as a Service (IaaS)
On-demand pricing, Sustained use discount, Committed use discount, Preemptible VM
Disks: Standard, SSD, Local SSD - Pay for allocation
Snapshots: mv disks different zones and regions, resize.
Custom applications
Lift and Shift

# GCP Networking
# VPC networking
Subnets are bound to regions
Each subnet defines a private IP address range
Networks can span multiple regions around the world
Shared VPC allows a network to be shared across multiple projects
Machines in different networks can only communicate with public IPs
Machines without a public IP can only be accessed within a network

# Load Balancers
Can be created for HTTP, TCP, or UDP
Can span multiple regions or balance traffic to machines in multiple zones within a single region
Can send traffic to multiple machines managed by one or more instance groups forming a back-end service
Can also send requests to static content in Cloud Storage buckets

# Cloud DNS
Allows you to manage your domains right from GCP
Map domains and subdomains to load balancers, cloud storage buckets, or App Engine applications

# Cloud CDN
Configured when setting up an HTTP(S) load balancer
CDN is cheaper for network egres traffic

# Cloud VPN
Cloud VPN allows secure access to VPC networks 
Can use a VPN to connect a GCP network to your local network
Can use a VPN to connect different GCP networks

## PaaS ##
# Google Container Engine
Used to deploy containerized applications
Applications deployed into a cluster of Compute Engine virtual machines
Application configuration is defined using Kubernetes open-source, orchestration framework
Kubernetes supports other clouds and on-premises deployments
GKE is more flexible than App Engine, but also less automated
Especially useful for hybrid deployments


# Google App Engine Standard
Each service is deployed independently
Services scale independently
Different languages can be used for different services
Can deploy multiple version simultaneously
Use traffic splitting to control which version(s) requests are sent to
Uses Google-specific containers for deploying services
Supports only Python, Java, PHP, and Go
Scales very quickly; containers can start in a couple hundred milliseconds
Will scale to zero instances when there is no traffic
free tier

# Google App Engine Flex
Uses Docker containers for deploying services
Supports any language that will run in a Docker container
Google provides preconfigured Docker containers for Python, Java, PHP, Go, Ruby, .NET, and NodeJS
Docker containers run in a Compute Engine virtual machine
Cannot scale to zero instances, so there is no free tier

# Google Cloud functions
Serverless environments for running Node.js functions
Just upload the code
Microservice architecture where each function performs one job
Can respond to Storage changes, Pub/Sub messages, or Web requests
Incredibly fast and scalable
Very inexpensive (first 2 million requests per month are free)

# Cloud Storage
Blob (binary large objects) storage is for storing any type of file
Relational storage is used for relational databases
NoSQL storage is for structured data 
Similar to relational, but simpler and often more scalable
Data warehousing is for data analysis and reporting
Buckets can be regional or multiregional
Data at rest stays in the region or regions specified
Can control access to buckets or objects inside buckets
  # Nearline
  Cost per GB is less than regional, but there is a cost for accessing data and a 1-month minimum charge
  Use for data that is accessed infrequently (photos might be an example)

  # Coldline
  Cost per GB is less than Nearline, but there is a higher cost for accessing data and a 3-month minimum charge
  Use for data archiving, backups, and disaster recovery

# Cloud SQL
Relational database storage
Supports MySQL and PostgreSQL (beta)
Simple setup and automated administration
Automated backups, maintenance, and replication
Built-in firewall prevents access from unauthorized computers
    # See slide 105 for docs

# Cloud Spanner
Massively scalable relational database service
Scales horizontally to hundreds or even thousands of servers
Strong consistency even with many servers
Uses atomic clocks to synchronize transactions around the globe
Designed for extremely high availability
Automatic replication
NoOps
    # See slide 107 for docs


# Cloud Datastore
NoSQL document database similar to MongoDB
Completely managed, NoOps
Supports ACID transactions across multiple entities
Flexible indexing allows for very fast and flexible data retrieval
Optimized for reading data quickly
1GB per month free tier
Redis - Memcache
    # See slide 108 for docs


# Cloud BigTable
Wide-column NoSQL datastore similar to Cassandra or HBase
Requires a cluster of machines be created
Cluster can be easily resized for scalability
Each row in a BigTable table must have a unique key
Only index available is the key
Very fast data retrieval as long as the key is searched
BigTable is optimized for extremely fast writes
Use BigTable when application accumulates huge amounts of data quickly
IoT applications, mobile apps, games, etc.


# Cloud BigQuery
Data warehousing and data analysis service
Extremely inexpensive storage
2 cents/GB/month for the first 3 months, then 1 cent/GB/month after
Analyze data with plain ANSI SQL 2011 queries 
Extremely fast: jobs split across many machines 
Easy to use: no indexes required, simple schemas
NoOps: no need to provision anything

# IAM
Use more restricted rights at the higher levels
Resources added at lower levels will inherit those restrictions
Privileges can be added at lower levels when necessary
Use service accounts and roles to secure machines and applications
Manage users in groups when possible
Audit your logs
Use roles to enforce the principle of least privilege
Use projects for separate duties

# Service Accounts
Usually a member is a human
Service accounts are special accounts that identify machines or applications
Service accounts are created in the form of an email
Service accounts can be assigned one or more roles
A computer or application can run using a service account identity
That machine will only be allowed to perform actions allowed by its roles

# Roles
# Primitive Roles
Are project-wide roles
Project viewer can see everything in a project
Project editor can change everything in a project
Project owner has all rights of editor and can add members
The primitive roles do not provide fine-grained control over what members can do

# Predefined Roles
One role can’t remove permissions granted by another role
For example, if you make someone a Project Owner and a Storage Viewer, they have read-write access to storage
App Engine Admin, BigQuery User, or DataStore Viewer are examples of predefined roles
Many predefined roles exist
Principle of least privilege

# StackDriver
Requests to Compute Engine, App Engine, BigQuery, Cloud SQL, Deployment Manager, Cloud VPN, and Cloud Storage are all logged
Tools are provided to read and analyze the logs
Have some process in place for regularly auditing the logs
Stackdriver can be used to monitor many different resources 
App Engine, disks, buckets, virtual machines, and many more
In addition to GCP resources, AWS resources can be monitored as well
Different metrics can be monitored depending on the resource
CPU usage, network traffic, uptime, message count, etc.
Custom metrics can be created
Installed on VMs to provide additional metrics not available externally
Memory usage and uptime, for example
Also provides metrics on common applications
Apache, Cassandra, CouchDB, HBase, IIS, JVM, Kafka, etc.
Logs can be exported for further analysis
Export destinations include:
BigQuery
Cloud Storage
Pub/Sub
Can create advanced filters to specify which log entries to export
Set a destination to Pub/Sub to immediately respond to a log export
    # Stackdriver documentation on slide 162

# GCP Dataflow
Apache Beam

# Cloud Pub/Sub
MQ Messaging - streaming data


# Cloud Dataproc
Hadoop/spark cluster
Hadoop - job written in Java
Spark - job written in Python
Hadoop and Spark clusters running in Google DataProc are examples

# Deployment manager
Reliable reproducable - deployment Manager
Cloud Launcher

All operations problems are treated as software problems though
Automate repetitive tasks
Fix problems with code

# Blue/Green Deployment
Allow new revisions to be deployed with less risk and no downtime
There are two copies of the production environment
Blue environment is taking requests
Green environment is idle
When deploying a new version:
Update new version to green environment leaving the blue environment in place
Test the green environment
When testing is complete, move the workload to the green environment
Green is now blue; can turn the old environment off
Blue-Green deployments also make rolling back to old versions easier
App Engine completely automates blue-green deployments
Multiple versions of App Engine apps can exist simultaneously
Can easily request any version by including the version in the URL
Testing can be done on new versions before migrating the load to them

# A/B Testing
A/B testing allows multiple versions of a program to run at the same time
Test the new version with a portion of the users 
Compare usage and errors of the two versions
Allows developers to get feedback and testing from real users prior to fully committing to a new version
In App Engine, use traffic-splitting 
for A/B testing

# Canary Release
A new version of a service is put into production alongside old versions
A small subset of select traffic is routed to the canary release
Canary releases help developers know how a new version will perform when put into production
Canary releases are easy to pull back if they fail their testing
Use a microservice architecture in App Engine
Each small service can be deployed separately from the other services in the application


# Homework
Slide 80
Read the networking docs
slide 88
slide 94 
# Homework
slide 122
155
slide 162, 176
Slide 206

# Study plan
Finish the labs
Flashcards
Key words the services
Re-take the exams  slides 4, 90, 114, 147, 195, 208
Read the Case Studies

doug@roitraining.com
wwww.roitraining.com
linkedin:drehnstrom