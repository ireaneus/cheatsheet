# Start docker daemon
docker -d

# start a container with an interactive shell
docker run -ti <image_name> /bin/bash

# "shell" into a running container (docker-1.3+)
docker exec -ti <container_name> bash

# inspect a running container
docker inspect <container_name> (or <container_id>)

# Get the process ID for a container
# Source: https://github.com/jpetazzo/nsenter
docker inspect --format {{.State.Pid}} <container_name_or_ID>

# List the current mounted volumes for a container (and pretty print)
# Source:
# http://nathanleclaire.com/blog/2014/07/12/10-docker-tips-and-tricks-that-will-make-you-sing-a-whale-song-of-joy/
docker inspect --format='{{json .Volumes}}' <container_id> | python -mjson.tool

# list currently running containers
docker ps

# list all containers
docker ps -a

# list all images
docker images

# Attach to a running docker image
docker attach <imagename> 		# ctrl+c will exit the container
docker stop <imagename>

docker restart <containerid/name>
docker exec -it <container> /bin/bash
exit

docker rmi -f docker/whalesay		# removes docker image forces
docker rm `docker ps -a -q`		# removes all old ran images

# docker ports
docker inspect <container> | grep -i ipaddress
docker run -d --name=WebServer1 -P nginx:latest 
docker ps 32770->/443 32771->80
docker port WebServer1 $CONTAINERPORT
docker run -d -p 8080:80 8443:443 --name=WebServer2 nginx:latest
elinks localhost:8080

# mount a directory
docker run -d -p 8080:80 --name=WebServer3 -v /mnt/data nginx:latest
docker run -d -p 8080:80 --name=WebServer4 -v /home/user/www:/usr/share/nginx/html nginx:latest

# docker build
# Create a Dockerfile
docker build -t latest123/myapache .

# Dockerfile
FROM debian:stable
MAINTAINER latest123 <latest123@linuxacademy.com>

RUN apt-get update -y && apt-get upgrade -y && apt-get install python python-pip apache 2 elinks openssh-server -y
ENV MYVALUE my-value

EXPOSE 80
EXPOSE 22

CMD ["/usr/sbin/apache2ctl","-D","FOREGROUND"]
